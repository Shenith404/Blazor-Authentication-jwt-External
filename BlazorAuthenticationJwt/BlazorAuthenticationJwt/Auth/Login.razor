@page "/auth/login"
@using BlazorAuthenticationJwt.Auth
@using BlazorAuthenticationJwt.Auth.DTOs
@using BlazorAuthenticationJwt.Auth.Services
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inject ISessionStorageService SessionStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthService authService;
@rendermode InteractiveServer

<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
               
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
               
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
               
            </EditForm>
        </section>
    </div>
   
</div>
<div>@errorMessage</div>

@code {
    private string? errorMessage;


    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }




    public async Task LoginUser()
    {

        AuthenticationRequestDTO requestDTO = new AuthenticationRequestDTO();
        requestDTO.UserName = Input.Email;
        requestDTO.Password = Input.Password;
        var result = await authService.Login(requestDTO);

        if (result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            var response = JsonConvert.DeserializeObject<AuthenticationResponseDTO>(content);

            await SessionStorage.SetItemAsync("token", response!.JwtToken);
            await SessionStorage.SetItemAsync("refreshToken", response!.RefreshToken);
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(response.JwtToken!);
           

            errorMessage = response.Message;

        }
        else
        {
            var content = await result.Content.ReadAsStringAsync();
            var response = JsonConvert.DeserializeObject<AuthenticationResponseDTO>(content);
            errorMessage = response.Message;
        }
       
        



    }

    private sealed class InputModel
    {
       
        public string Email { get; set; } = "";

     
        public string Password { get; set; } = "";

       
    }

    // Get the Ip Address

 
}